# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è WebApp
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start, /test, /help
"""

import os
import asyncio
from dotenv import load_dotenv

try:
    import httpx
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ httpx: pip install httpx")
    exit(1)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBAPP_URL = os.getenv("WEBAPP_URL", "")
CHANNEL_URL = os.getenv("CHANNEL_URL", "https://t.me/yourchannel")

if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
    exit(1)

class TelegramBot:
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
        self.offset = 0
    
    async def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"{self.api_url}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data)
            return response.json()
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        url = f"{self.api_url}/getUpdates"
        params = {
            "offset": self.offset,
            "timeout": 30
        }
        
        async with httpx.AsyncClient(timeout=35) as client:
            response = await client.get(url, params=params)
            return response.json()
    
    async def handle_start(self, chat_id, username):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        message = f"""
üëã –ü—Ä–∏–≤–µ—Ç{f', {username}' if username else ''}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç <b>"–ö—Ç–æ —Ç–≤–æ—è —Ä–æ–ª—å –≤ Dota 2?"</b>

üéÆ –ü—Ä–æ–π–¥–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, –∫–∞–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ!

üìä –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–≤–æ—é —Ä–æ–ª—å –∏–∑ 5 –ø–æ–∑–∏—Ü–∏–π:
‚Ä¢ –ö–µ—Ä—Ä–∏ (Position 1)
‚Ä¢ –ú–∏–¥–µ—Ä (Position 2)
‚Ä¢ –û—Ñ—Ñ–ª–µ–π–Ω–µ—Ä (Position 3)
‚Ä¢ –•–∞—Ä–¥—Å–∞–ø–æ—Ä—Ç (Position 4)
‚Ä¢ –§—É–ª–ª –°–∞–ø–ø–æ—Ä—Ç (Position 5)

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
"""
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp –∫–Ω–æ–ø–∫–æ–π
        reply_markup = {
            "inline_keyboard": [
                [
                    {
                        "text": "üéÆ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                        "web_app": {"url": WEBAPP_URL}
                    }
                ],
                [
                    {
                        "text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        "url": CHANNEL_URL
                    }
                ]
            ]
        }
        
        await self.send_message(chat_id, message, reply_markup)
    
    async def handle_help(self, chat_id):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        message = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
/test - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–û —Ç–µ—Å—Ç–µ:</b>
–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é —Ä–æ–ª—å –≤ Dota 2 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Å—Ç–∏–ª—è –∏–≥—Ä—ã.

<b>–†–æ–ª–∏ –≤ Dota 2:</b>
‚Ä¢ <b>Pos 1 (–ö–µ—Ä—Ä–∏)</b> - –æ—Å–Ω–æ–≤–Ω–æ–π damage dealer
‚Ä¢ <b>Pos 2 (–ú–∏–¥)</b> - –ª–∏–¥–µ—Ä –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
‚Ä¢ <b>Pos 3 (–û—Ñ—Ñ–ª–µ–π–Ω)</b> - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏ —Ç–∞–Ω–∫
‚Ä¢ <b>Pos 4 (–•–∞—Ä–¥—Å–∞–ø–æ—Ä—Ç)</b> - —Ä–æ—É–º–µ—Ä –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
‚Ä¢ <b>Pos 5 (–°–∞–ø–ø–æ—Ä—Ç)</b> - –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

‚ùì –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: {CHANNEL_URL}
"""
        await self.send_message(chat_id, message)
    
    async def process_update(self, update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if "message" not in update:
            return
        
        message = update["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        username = message.get("from", {}).get("first_name", "")
        
        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({chat_id}): {text}")
        
        if text.startswith("/start"):
            await self.handle_start(chat_id, username)
        elif text.startswith("/test"):
            await self.handle_start(chat_id, username)
        elif text.startswith("/help"):
            await self.handle_help(chat_id)
        else:
            await self.send_message(
                chat_id,
                "–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏"
            )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print(f"   WebApp URL: {WEBAPP_URL}")
        print("   –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...\n")
        
        while True:
            try:
                updates = await self.get_updates()
                
                if not updates.get("ok"):
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {updates}")
                    await asyncio.sleep(5)
                    continue
                
                for update in updates.get("result", []):
                    self.offset = update["update_id"] + 1
                    await self.process_update(update)
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)

async def main():
    if not WEBAPP_URL:
        print("‚ö†Ô∏è  WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ WebApp –∫–Ω–æ–ø–∫–∏.")
    
    bot = TelegramBot(BOT_TOKEN)
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

